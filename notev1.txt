//package com.programminghut.realtime_object
//
//import android.Manifest
//import android.annotation.SuppressLint
//import android.content.Context
//import android.content.pm.PackageManager
//import android.graphics.*
//import android.hardware.camera2.CameraCaptureSession
//import android.hardware.camera2.CameraDevice
//import android.hardware.camera2.CameraManager
//import androidx.appcompat.app.AppCompatActivity
//import android.os.Bundle
//import android.os.Handler
//import android.os.HandlerThread
//import android.os.Looper
//import android.util.Log
//import android.view.Surface
//import android.view.TextureView
//import android.widget.ImageView
//import android.widget.Toast
//import androidx.core.content.ContextCompat
//import com.programminghut.realtime_object.ml.SsdMobilenetV11Metadata1
//import com.programminghut.realtime_object.ml.Model
//import org.tensorflow.lite.DataType
//import org.tensorflow.lite.support.common.FileUtil
//import org.tensorflow.lite.support.image.ImageProcessor
//import org.tensorflow.lite.support.image.TensorImage
//import org.tensorflow.lite.support.image.ops.ResizeOp
//
//class MainActivity : AppCompatActivity() {
//
//    lateinit var labels:List<String>
//    var colors = listOf<Int>(
//        Color.BLUE, Color.GREEN, Color.RED, Color.CYAN, Color.GRAY, Color.BLACK,
//        Color.DKGRAY, Color.MAGENTA, Color.YELLOW, Color.RED)
//    val paint = Paint()
//    lateinit var imageProcessor:ImageProcessor
//    lateinit var bitmap:Bitmap
//    lateinit var imageView:ImageView
//    lateinit var cameraDevice:CameraDevice
//    lateinit var handler:Handler
//    lateinit var cameraManager:CameraManager
//    lateinit var textureView:TextureView
//    lateinit var model:Model
//
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        setContentView(R.layout.activity_main)
//        get_permission()
//
//        labels = FileUtil.loadLabels(this, "labels.txt")
//        imageProcessor = ImageProcessor.Builder()
//            .add(ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR))
//            .build()
//
////        imageProcessor = ImageProcessor.Builder().add(ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR)).build()
////        model = SsdMobilenetV11Metadata1.newInstance(this)
//        model = Model.newInstance(this)
//        val handlerThread = HandlerThread("videoThread")
//        handlerThread.start()
//        handler = Handler(handlerThread.looper)
//
//        imageView = findViewById(R.id.imageView)
//
//        textureView = findViewById(R.id.textureView)
//        textureView.surfaceTextureListener = object:TextureView.SurfaceTextureListener{
//            override fun onSurfaceTextureAvailable(p0: SurfaceTexture, p1: Int, p2: Int) {
//                open_camera()
//            }
//            override fun onSurfaceTextureSizeChanged(p0: SurfaceTexture, p1: Int, p2: Int) {
//            }
//
//            override fun onSurfaceTextureDestroyed(p0: SurfaceTexture): Boolean {
//                return false
//            }
//            override fun onSurfaceTextureUpdated(p0: SurfaceTexture) {
////                bitmap = textureView.bitmap!!
////                var image = TensorImage.fromBitmap(bitmap)
////                image = imageProcessor.process(image)
//                bitmap = textureView.bitmap!!
//                var image = TensorImage(DataType.FLOAT32)
//                image.load(bitmap)
//                image = imageProcessor.process(image)
//
//                val tensorBuffer = image.tensorBuffer
//
//                val outputs = model.process(tensorBuffer)
//                val probability = outputs.outputFeature0AsTensorBuffer.floatArray
//                val drowsyProb = probability[0]
//                val awakeProb = probability[1]
//                val yawnProb = probability[2]
//
//                // Insert delay after detection
//                if (drowsyProb > 0.8f) {
//                    Handler(Looper.getMainLooper()).postDelayed({
//                        showWarning()
//                    }, 2000)
//                }
//
//                val status: String
//                val confidence: Int
//
//                when {
//                    drowsyProb >= awakeProb && drowsyProb >= yawnProb -> {
//                        status = "Drowsy"
//                        confidence = (drowsyProb * 100).toInt()
//                    }
//                    yawnProb >= drowsyProb && yawnProb >= awakeProb -> {
//                        status = "Yawn"
//                        confidence = (yawnProb * 100).toInt()
//                    }
//                    else -> {
//                        status = "Awake"
//                        confidence = (awakeProb * 100).toInt()
//                    }
//                }
//
//                var mutable = bitmap.copy(Bitmap.Config.ARGB_8888, true)
//                val canvas = Canvas(mutable)
//
//                val h = mutable.height
//                val w = mutable.width
//                paint.textSize = h / 15f
//                paint.strokeWidth = h / 85f
//
//                paint.color = when (status) {
//                    "Drowsy" -> Color.RED
//                    "Awake" -> Color.GREEN
//                    "Yawn" -> Color.YELLOW
//                    else -> Color.GRAY
//                }
//                paint.style = Paint.Style.FILL
//
////                val status = if (probability > 0.5) "Drowsy" else "Awake"
////                canvas.drawText("$status: ${(probability * 100).toInt()}%", 50f, 100f, paint)
//                canvas.drawText("$status: $confidence%", 50f, 100f, paint)
//                imageView.setImageBitmap(mutable)
//            }
//        }
//
//        cameraManager = getSystemService(CAMERA_SERVICE) as CameraManager
//
//    }
//
//    fun showWarning() {
//        Toast.makeText(this, "ðŸš¨ Drowsiness Detected!", Toast.LENGTH_SHORT).show()
//        // You can also vibrate, play alarm sound, etc
//    }
//
//
//    override fun onDestroy() {
//        super.onDestroy()
//        model.close()
//    }
//
//    @SuppressLint("MissingPermission")
//    fun open_camera(){
//        cameraManager.openCamera(cameraManager.cameraIdList[0], object:CameraDevice.StateCallback(){
//            override fun onOpened(p0: CameraDevice) {
//                cameraDevice = p0
//
//                var surfaceTexture = textureView.surfaceTexture
//                var surface = Surface(surfaceTexture)
//
//                var captureRequest = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
//                captureRequest.addTarget(surface)
//
//                cameraDevice.createCaptureSession(listOf(surface), object: CameraCaptureSession.StateCallback(){
//                    override fun onConfigured(p0: CameraCaptureSession) {
//                        p0.setRepeatingRequest(captureRequest.build(), null, null)
//                    }
//                    override fun onConfigureFailed(p0: CameraCaptureSession) {
//                    }
//                }, handler)
//            }
//
//            override fun onDisconnected(p0: CameraDevice) {
//
//            }
//
//            override fun onError(p0: CameraDevice, p1: Int) {
//
//            }
//        }, handler)
//    }
//
//    fun get_permission(){
//        if(ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED){
//            requestPermissions(arrayOf(Manifest.permission.CAMERA), 101)
//        }
//    }
//    override fun onRequestPermissionsResult(
//        requestCode: Int,
//        permissions: Array<out String>,
//        grantResults: IntArray
//    ) {
//        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
//        if(grantResults[0] != PackageManager.PERMISSION_GRANTED){
//            get_permission()
//        }
//    }
//}
